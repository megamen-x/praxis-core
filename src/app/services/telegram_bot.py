# app/services/telegram_bot.py
import os
import logging
from typing import Dict
from dotenv import dotenv_values

import httpx

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

logger = logging.getLogger(__name__)
config = dotenv_values(".env")


class UserStates(StatesGroup):
    waiting_for_fio = State()
    waiting_for_subject_fio = State()
    waiting_for_survey_users = State()


class TelegramBotService:
    """
    Telegram bot service that handles:
    - /start: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –§–ò–û
    - –ö–Ω–æ–ø–∫–∏: —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤—å—é, —Å–ø–∏—Å–æ–∫ —Ä–µ–≤—å—é, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤—å—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–≤—å—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    - /cancel: –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    """

    # Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    CB_CREATE_REVIEW = "create_review"
    CB_LIST_REVIEWS = "list_reviews"
    CB_BACK_TO_MAIN = "back_to_main"
    CB_CREATE_SURVEY = "create_survey"
    CB_EDIT_REVIEW = "edit_review"
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
    BTN_CREATE_REVIEW = "üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ–≤—å—é"
    BTN_LIST_REVIEWS = "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≤—å—é"
    BTN_BACK_TO_MAIN = "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    BTN_CREATE_SURVEY = "üì§ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    BTN_EDIT_REVIEW = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Review"

    # –¢–µ–∫—Å—Ç—ã
    ASK_FIO_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û): "
    ASK_SUBJECT_TAG_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–≤—å—é"
    WELCOME_TEMPLATE = "üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
    ADMIN_PANEL_MESSAGE = "üëë –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    def __init__(self, bot_token: str, backend_url: str):
        self.bot = Bot(token=bot_token)
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)

        self.backend_url = backend_url

        self.user_states: Dict[int, str] = {}
        self.user_db_ids: Dict[int, str] = {}

        self._register_handlers()

    def _url(self, path: str) -> str:
        return self.backend_url.rstrip("/") + "/" + path.lstrip("/")

    def _admin_keyboard(self):
        kb = InlineKeyboardBuilder()
        kb.button(text=self.BTN_CREATE_REVIEW, callback_data=self.CB_CREATE_REVIEW)
        kb.button(text=self.BTN_LIST_REVIEWS, callback_data=self.CB_LIST_REVIEWS)
        return kb.as_markup()

    def _reviews_list_keyboard(self, reviews):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≤—å—é"""
        kb = InlineKeyboardBuilder()
        for review in reviews:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            title = review['title'][:30] + "..." if len(review['title']) > 30 else review['title']
            kb.button(text=f"üìù {title}", callback_data=f"review_{review['review_id']}")
        
        kb.button(text=self.BTN_BACK_TO_MAIN, callback_data=self.CB_BACK_TO_MAIN)
        kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        return kb.as_markup()

    def _review_actions_keyboard(self, review_id):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≤—å—é"""
        kb = InlineKeyboardBuilder()
        kb.button(text=self.BTN_CREATE_SURVEY, callback_data=f"survey_{review_id}")
        kb.button(text=self.BTN_EDIT_REVIEW, callback_data=f"edit_{review_id}")
        kb.button(text=self.BTN_BACK_TO_MAIN, callback_data=self.CB_BACK_TO_MAIN)
        kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        return kb.as_markup()

    async def _is_admin(self, db_user_id: str) -> bool:
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                resp = await client.post(self._url(f"/api/user/{db_user_id}/is_admin"))
                if resp.status_code >= 400:
                    return False
                try:
                    data = resp.json()
                    if isinstance(data, dict) and "is_admin" in data:
                        return bool(data["is_admin"])
                    if isinstance(data, bool):
                        return data
                except Exception:
                    pass
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
            return False

    # ----------------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------------------------- #
    def _register_handlers(self):
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.cancel_command, Command("cancel"))
        self.dp.message.register(self.menu_command, Command("menu"))

        # Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.create_review_callback, F.data == self.CB_CREATE_REVIEW)
        self.dp.callback_query.register(self.list_reviews_callback, F.data == self.CB_LIST_REVIEWS)
        self.dp.callback_query.register(self.back_to_main_callback, F.data == self.CB_BACK_TO_MAIN)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–≤—å—é
        self.dp.callback_query.register(self.review_selected_callback, F.data.startswith("review_"))
        self.dp.callback_query.register(self.create_survey_callback, F.data.startswith("survey_"))
        self.dp.callback_query.register(self.edit_review_callback, F.data.startswith("edit_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        self.dp.message.register(self.handle_fio_input, UserStates.waiting_for_fio)
        self.dp.message.register(self.handle_subject_fio_input, UserStates.waiting_for_subject_fio)
        self.dp.message.register(self.handle_survey_users_input, UserStates.waiting_for_survey_users)

    async def start_polling(self):
        await self.dp.start_polling(self.bot)

    # -------------------------------- –ö–æ–º–∞–Ω–¥—ã -------------------------------- #
    async def start_command(self, message: Message, state: FSMContext):
        user_id = message.from_user.id if message.from_user else None
        if not user_id:
            return
        
        await state.set_state(UserStates.waiting_for_fio)
        await message.answer(self.ASK_FIO_MESSAGE)

    async def cancel_command(self, message: Message, state: FSMContext):
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

    async def menu_command(self, message: Message, state: FSMContext):
        user_id = message.from_user.id if message.from_user else None
        if not user_id:
            return
        # –û–±–µ—Å–ø–µ—á–∏–º –Ω–∞–ª–∏—á–∏–µ db id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
        if user_id not in self.user_db_ids:
            try:
                async with httpx.AsyncClient(timeout=15.0) as client:
                    search_resp = await client.get(self._url(f"/api/user/telegram/{user_id}"))
                    if search_resp.status_code == 200:
                        user_info = search_resp.json()
                        self.user_db_ids[user_id] = user_info["user_id"]
                    else:
                        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
                        return
            except Exception:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        is_admin = await self._is_admin(self.user_db_ids[user_id])
        if is_admin:
            await message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=self._admin_keyboard()
            )
        else:
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    # ------------------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ------------------------------- #
    async def handle_fio_input(self, message: Message, state: FSMContext):
        user_id = message.from_user.id if message.from_user else None
        if not user_id:
            return

        fio_text = message.text.strip()
        
        parts = fio_text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'")
            return

        last_name = parts[0]
        first_name = parts[1]
        middle_name = parts[2]

        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
                search_resp = await client.get(self._url(f"/api/user/telegram/{user_id}"))
                
                if search_resp.status_code == 200:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    user_info = search_resp.json()
                    self.user_db_ids[user_id] = user_info["user_id"]
                    
                    if user_info.get("can_create_review", False):
                        await message.answer(
                            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_info['first_name']}!\n\n{TelegramBotService.ADMIN_PANEL_MESSAGE}",
                            reply_markup=self._admin_keyboard()
                        )
                    else:
                        await message.answer(
                            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_info['first_name']}!"
                        )
                    
                    await state.clear()
                    return
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                user_data = {
                    "first_name": first_name,
                    "last_name": last_name,
                    "middle_name": middle_name,
                    "telegram_chat_id": str(user_id),
                    "can_create_review": True
                }
                
                resp = await client.post(self._url("/api/user"), json=user_data)
                
                if resp.status_code in [200, 201]:
                    user_info = resp.json()
                    self.user_db_ids[user_id] = user_info["user_id"]
                    
                    if user_info.get("can_create_review", False):
                        await message.answer(
                            text=f"{TelegramBotService.WELCOME_TEMPLATE.format(first_name=first_name)}\n\n{TelegramBotService.ADMIN_PANEL_MESSAGE}",
                            reply_markup=self._admin_keyboard()
                        )
                    else:
                        await message.answer(
                            TelegramBotService.WELCOME_TEMPLATE.format(first_name=first_name)
                        )
                    
                    await state.clear()
                elif resp.status_code == 400:
                    pass
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_subject_fio_input(self, message: Message, state: FSMContext):
        user_id = message.from_user.id if message.from_user else None
        if not user_id:
            return

        fio_text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –§–ò–û —Å—É–±—ä–µ–∫—Ç–∞
        parts = fio_text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ' –∏–ª–∏ '–§–∞–º–∏–ª–∏—è –ò–º—è'")
            return

        last_name = parts[0]
        first_name = parts[1]
        middle_name = parts[2]

        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
            async with httpx.AsyncClient(timeout=15.0) as client:
                params = {
                    "first_name": first_name,
                    "last_name": last_name,
                    "middle_name": middle_name
                }
                
                resp = await client.post(self._url("/api/user/fio"), json=params)
                
                if resp.status_code == 200:
                    subject_user = resp.json()
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≤—å—é
                    review_data = {
                        "subject_user_id": subject_user["user_id"],
                        "created_by_user_id": self.user_db_ids[user_id],
                        "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–≤—å—é"
                    }
                    
                    review_resp = await client.post(self._url("/api/review/create"), json=review_data)
                    
                    if review_resp.status_code == 200:
                        review_info = review_resp.json()
                        await message.answer(
                            f"‚úÖ –†–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"üìù ID —Ä–µ–≤—å—é: {review_info['review_id']}\n"
                            f"üë§ –°—É–±—ä–µ–∫—Ç: {first_name} {last_name}\n\n"
                            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=self._review_actions_keyboard(review_info['review_id'])
                        )
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≤—å—é.")
                else:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –§–ò–û.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≤—å—é: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()

    async def handle_survey_users_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = message.from_user.id if message.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        review_id = data.get('review_id')
        
        if not review_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        users_text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_fios = [fio.strip() for fio in users_text.split(',') if fio.strip()]
        
        if not user_fios:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –§–ò–û
            evaluator_user_ids = []
            async with httpx.AsyncClient(timeout=15.0) as client:
                for fio in user_fios:
                    parts = fio.split()
                    if len(parts) < 2:
                        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û: {fio}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'")
                        continue
                    
                    last_name = parts[0]
                    first_name = parts[1]
                    middle_name = parts[2] if len(parts) > 2 else None
                    
                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
                    params = {
                        "first_name": first_name,
                        "last_name": last_name,
                        "middle_name": middle_name
                    }
                    
                    resp = await client.post(self._url("/api/user/fio"), json=params)
                    
                    if resp.status_code == 200:
                        user_info = resp.json()
                        evaluator_user_ids.append(user_info["user_id"])
                    else:
                        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {fio}")
                        continue

                if not evaluator_user_ids:
                    await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return

                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                survey_data = {
                    "evaluator_user_ids": evaluator_user_ids
                }
                
                survey_resp = await client.post(self._url(f"/api/reviews/{review_id}/surveys"), json=survey_data)
                
                if survey_resp.status_code == 200:
                    surveys = survey_resp.json()
                    await message.answer(
                        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
                        f"üìù –°–æ–∑–¥–∞–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {len(surveys)}\n"
                        f"–û–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≤—å—é.",
                        reply_markup=self._admin_keyboard()
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()

    # ------------------------------- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ------------------------------- #
    async def create_review_callback(self, callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        await state.set_state(UserStates.waiting_for_subject_fio)
        await callback.message.edit_text("üë§ –ü–æ –∫–∞–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–≤—å—é? –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        await callback.answer()

    async def list_reviews_callback(self, callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                resp = await client.get(self._url(f"/api/user/{self.user_db_ids[user_id]}/reviews"))
                
                if resp.status_code == 200:
                    reviews = resp.json()
                    if reviews:
                        await callback.message.edit_text(
                            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≤—å—é –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                            reply_markup=self._reviews_list_keyboard(reviews)
                        )
                    else:
                        await callback.message.edit_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–≤—å—é.")
                else:
                    await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≤—å—é.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≤—å—é: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.answer()

    async def back_to_main_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=self._admin_keyboard()
        )
        await callback.answer()

    async def review_selected_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≤—å—é"""
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ callback_data
        review_id = callback.data.replace("review_", "")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≤—å—é
            async with httpx.AsyncClient(timeout=15.0) as client:
                resp = await client.get(self._url(f"/api/review/{review_id}"))
                
                if resp.status_code == 200:
                    review = resp.json()
                    await callback.message.edit_text(
                        f"üìù **{review['title']}**\n\n"
                        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {review.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üîí –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å: {'–î–∞' if review.get('anonymity', True) else '–ù–µ—Ç'}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {review.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=self._review_actions_keyboard(review_id)
                    )
                else:
                    await callback.message.edit_text("‚ùå –†–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≤—å—é: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.answer()

    async def create_survey_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–≤—å—é"""
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ callback_data
        review_id = callback.data.replace("survey_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º review_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(review_id=review_id)
        await state.set_state(UserStates.waiting_for_survey_users)
        
        await callback.message.edit_text(
            f"üì§ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û:\n\n"
            f"–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await callback.answer()

    async def edit_review_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≤—å—é - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç"""
        user_id = callback.from_user.id if callback.from_user else None
        if not user_id or user_id not in self.user_db_ids:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ callback_data
        review_id = callback.data.replace("edit_", "")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
            async with httpx.AsyncClient(timeout=15.0) as client:
                resp = await client.get(self._url(f"/api/review/{review_id}"))
                
                if resp.status_code == 200:
                    review = resp.json()
                    review_link = review.get('review_link')
                    
                    if review_link:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
                        kb = InlineKeyboardBuilder()
                        kb.button(text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=self._url(review_link))
                        kb.button(text=self.BTN_BACK_TO_MAIN, callback_data=self.CB_BACK_TO_MAIN)
                        kb.adjust(1)
                        
                        await callback.message.edit_text(
                            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≤—å—é**\n\n"
                            f"üìù {review['title']}\n\n"
                            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                            reply_markup=kb.as_markup()
                        )
                    else:
                        await callback.message.edit_text(
                            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≤—å—é {review_id}\n\n"
                            f"‚ùå –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            reply_markup=self._review_actions_keyboard(review_id)
                        )
                else:
                    await callback.message.edit_text("‚ùå –†–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≤—å—é: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.answer()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
telegram_bot_service = None


async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
    global telegram_bot_service
    
    bot_token = config.get("BOT_TOKEN")
    backend_url = config.get("BACKEND_URL", "http://127.0.0.1:8000")
    
    if not bot_token:
        logger.warning("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return
    
    try:
        telegram_bot_service = TelegramBotService(bot_token, backend_url)
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
        await telegram_bot_service.start_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞: {e}")


def get_telegram_bot_service():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
    return telegram_bot_service
