# app/services/notification.py
import logging
from datetime import datetime, timezone
from sqlalchemy.orm import Session
from sqlalchemy import select, and_
from src.db.models import Review, User
from src.app.routers.telegram import send_telegram_message

logger = logging.getLogger(__name__)


async def check_review_notifications_task(db: Session):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤
    
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    current_time = datetime.now(timezone.utc)
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ä–µ–≤—å—é, –≥–¥–µ end_at —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
    reviews = db.execute(
        select(Review, User)
        .join(User, Review.created_by_user_id == User.user_id)
        .where(
            and_(
                Review.end_at.isnot(None),
                Review.end_at <= current_time,
                Review.status == "completed"  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≤—å—é
            )
        )
    ).all()
    
    for review, user in reviews:
        message = f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n\n–†–µ–≤—å—é: {review.title}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.first_name} {user.last_name}"
        request = {
            "user_id": review.created_by_user_id,
            "message": message
            }
        response = await send_telegram_message(request)
        
        if response.success:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–≤—å—é {review.review_id}")
