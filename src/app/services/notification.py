# app/services/notification.py
import asyncio
import logging
from datetime import datetime, timezone
from typing import Optional
from sqlalchemy.orm import Session
from sqlalchemy import select, and_
from src.db.models import Review, User
from src.app.core.config import settings

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = None
    
    async def _get_bot(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if self.bot is None:
            from aiogram import Bot
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            
            self.bot = Bot(
                token=self.bot_token, 
                default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
            )
        return self.bot
    
    async def send_notification(self, user_id: str, message: str, db: Session) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        :return: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.get(User, user_id)
            if not user or not user.telegram_chat_id:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç telegram_chat_id")
                return False
            
            bot = await self._get_bot()
            
            await bot.send_message(
                chat_id=user.telegram_chat_id,
                text=message
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (chat_id: {user.telegram_chat_id}): {message}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def check_and_send_review_notifications(self, db: Session):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤
        
        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        current_time = datetime.now(timezone.utc)
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Ä–µ–≤—å—é, –≥–¥–µ end_at —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
        reviews = db.execute(
            select(Review, User)
            .join(User, Review.created_by_user_id == User.user_id)
            .where(
                and_(
                    Review.end_at.isnot(None),
                    Review.end_at <= current_time,
                    Review.status == "completed"  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≤—å—é
                )
            )
        ).all()
        
        for review, user in reviews:
            message = f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n\n–†–µ–≤—å—é: {review.title}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.first_name} {user.last_name}"
            
            success = await self.send_notification(
                user_id=review.created_by_user_id,
                message=message,
                db=db
            )
            
            if success:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                # —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–≤—å—é {review.review_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = None


def get_notification_service() -> NotificationService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_service
    if notification_service is None:
        notification_service = NotificationService(settings.TG_BOT_TOKEN)
    return notification_service


async def check_review_notifications_task(db: Session):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    service = get_notification_service()
    await service.check_and_send_review_notifications(db)
