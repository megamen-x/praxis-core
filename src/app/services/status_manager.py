# app/services/status_manager.py
import logging
from datetime import datetime, timezone, timedelta
from typing import List, Tuple
from sqlalchemy.orm import Session
from sqlalchemy import select, update, and_
from src.db.models import Review, Survey, ReviewStatus, SurveyStatus
from src.app.services.notification import get_notification_service

logger = logging.getLogger(__name__)


class StatusManager:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ Review –∏ Survey"""
    
    def __init__(self, db: Session):
        self.db = db
        self.notification_service = get_notification_service()
    
    async def update_review_statuses(self) -> Tuple[int, int, int]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö Review –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            Tuple[int, int, int]: (started_count, completed_count, archived_count)
        """
        current_time = datetime.now(timezone.utc)
        one_year_ago = current_time - timedelta(days=365)
        
        started_count = 0
        completed_count = 0
        archived_count = 0
        
        # 1. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≤—å—é (draft -> in_progress)
        started_reviews = await self._start_reviews(current_time)
        started_count = len(started_reviews)
        
        # 2. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≤—å—é (in_progress -> completed)
        completed_reviews = await self._complete_reviews(current_time)
        completed_count = len(completed_reviews)
        
        # 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–≤—å—é (completed -> archived)
        archived_reviews = await self._archive_reviews(one_year_ago)
        archived_count = len(archived_reviews)
        
        return started_count, completed_count, archived_count
    
    async def update_survey_statuses(self) -> int:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã Survey –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ Review
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        """
        updated_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
        active_surveys = self.db.execute(
            select(Survey, Review)
            .join(Review, Survey.review_id == Review.review_id)
            .where(
                and_(
                    Survey.status.in_([SurveyStatus.not_started, SurveyStatus.in_progress]),
                    Review.status == ReviewStatus.in_progress
                )
            )
        ).all()
        
        for survey, review in active_surveys:
            # –ï—Å–ª–∏ —Ä–µ–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å, –Ω–æ –æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ in_progress
            if survey.status == SurveyStatus.not_started:
                survey.status = SurveyStatus.in_progress
                updated_count += 1
                logger.info(f"Survey {survey.survey_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å in_progress")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã, –≥–¥–µ —Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        completed_reviews = self.db.execute(
            select(Review)
            .where(Review.status == ReviewStatus.completed)
        ).scalars().all()
        
        for review in completed_reviews:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≤—å—é
            incomplete_surveys = self.db.execute(
                select(Survey)
                .where(
                    and_(
                        Survey.review_id == review.review_id,
                        Survey.status.in_([SurveyStatus.not_started, SurveyStatus.in_progress])
                    )
                )
            ).scalars().all()
            
            for survey in incomplete_surveys:
                survey.status = SurveyStatus.expired
                updated_count += 1
                logger.info(f"Survey {survey.survey_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å expired")
        
        self.db.commit()
        return updated_count
    
    async def _start_reviews(self, current_time: datetime) -> List[Review]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≤—å—é, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—à–ª–æ"""
        reviews_to_start = self.db.execute(
            select(Review)
            .where(
                and_(
                    Review.status == ReviewStatus.draft,
                    Review.start_at.isnot(None),
                    Review.start_at <= current_time
                )
            )
        ).scalars().all()
        
        for review in reviews_to_start:
            review.status = ReviewStatus.in_progress
            logger.info(f"Review {review.review_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å in_progress")
        
        self.db.commit()
        return reviews_to_start
    
    async def _complete_reviews(self, current_time: datetime) -> List[Review]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≤—å—é, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–æ"""
        reviews_to_complete = self.db.execute(
            select(Review)
            .where(
                and_(
                    Review.status == ReviewStatus.in_progress,
                    Review.end_at.isnot(None),
                    Review.end_at <= current_time
                )
            )
        ).scalars().all()
        
        for review in reviews_to_complete:
            review.status = ReviewStatus.completed
            logger.info(f"Review {review.review_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å completed")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
            try:
                await self.notification_service.send_notification(
                    user_id=review.created_by_user_id,
                    message=f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n\n–†–µ–≤—å—é: {review.title}",
                    db=self.db
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è Review {review.review_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Review {review.review_id}: {e}")
        
        self.db.commit()
        return reviews_to_complete
    
    async def _archive_reviews(self, one_year_ago: datetime) -> List[Review]:
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≤—å—é"""
        reviews_to_archive = self.db.execute(
            select(Review)
            .where(
                and_(
                    Review.status == ReviewStatus.completed,
                    Review.end_at.isnot(None),
                    Review.end_at <= one_year_ago
                )
            )
        ).scalars().all()
        
        for review in reviews_to_archive:
            review.status = ReviewStatus.archived
            logger.info(f"Review {review.review_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å archived")
        
        self.db.commit()
        return reviews_to_archive
    
    async def process_all_statuses(self) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã Review –∏ Survey
        
        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–µ–≤—å—é
            started, completed, archived = await self.update_review_statuses()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–ø—Ä–æ—Å–æ–≤
            surveys_updated = await self.update_survey_statuses()
            
            stats = {
                "reviews_started": started,
                "reviews_completed": completed,
                "reviews_archived": archived,
                "surveys_updated": surveys_updated,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            logger.info(f"–°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            raise


def get_status_manager(db: Session) -> StatusManager:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    return StatusManager(db)
